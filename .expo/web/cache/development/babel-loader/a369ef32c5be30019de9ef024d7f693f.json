{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport config from \"../env/config\";\nvar basemanager = {\n  get: function get(url) {\n    var responsedata;\n    return _regeneratorRuntime.async(function get$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(config.apiurl + url).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              responsedata = data;\n            }));\n\n          case 2:\n            return _context.abrupt(\"return\", responsedata);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  post: function post(url, data) {\n    var resultdata, requestOptions;\n    return _regeneratorRuntime.async(function post$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            requestOptions = {\n              method: 'POST',\n              body: JSON.stringify(data),\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            };\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(config.apiurl + url, requestOptions).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              resultdata = data;\n            }));\n\n          case 3:\n            return _context2.abrupt(\"return\", resultdata);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default basemanager;","map":{"version":3,"sources":["C:/Users/Berk/Desktop/React-native-proje/Reactnativeproject/service/baseservice.js"],"names":["config","basemanager","get","url","fetch","apiurl","then","res","json","data","responsedata","post","requestOptions","method","body","JSON","stringify","headers","resultdata"],"mappings":";AAIA,OAAOA,MAAP;AAEA,IAAMC,WAAW,GAAG;AAEhBC,EAAAA,GAAG,EAAE,aAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAIKC,KAAK,CAACJ,MAAM,CAACK,MAAP,GAAgBF,GAAjB,CAAL,CACDG,IADC,CACI,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,aADJ,EAEDF,IAFC,CAEI,UAACG,IAAD,EAAU;AACZC,cAAAA,YAAY,GAAGD,IAAf;AACH,aAJC,CAJL;;AAAA;AAAA,6CAUMC,YAVN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFW;AAgBhBC,EAAAA,IAAI,EAAE,cAAOR,GAAP,EAAYM,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAGEG,YAAAA,cAHF,GAGmB;AACjBC,cAAAA,MAAM,EAAE,MADS;AAEjBC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAFW;AAGjBQ,cAAAA,OAAO,EAAE;AACL,0BAAU,kBADL;AAEL,gCAAgB;AAFX;AAHQ,aAHnB;AAAA;AAAA,6CAYIb,KAAK,CAACJ,MAAM,CAACK,MAAP,GAAgBF,GAAjB,EAAsBS,cAAtB,CAAL,CACDN,IADC,CACI,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,aADJ,EAEDF,IAFC,CAEI,UAACG,IAAD,EAAU;AACZS,cAAAA,UAAU,GAAGT,IAAb;AACH,aAJC,CAZJ;;AAAA;AAAA,8CAkBKS,UAlBL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBU,CAApB;AAyCA,eAAejB,WAAf","sourcesContent":["  \n\n// POST, PUST, DELETE \n\nimport config from \"../env/config\"\n\nconst basemanager = {\n\n    get: async (url) => {\n\n        let responsedata;\n\n        await fetch(config.apiurl + url)\n            .then((res) => res.json())\n            .then((data) => {\n                responsedata = data;\n            });\n\n        return responsedata;\n\n    },\n\n    post: async (url, data) => {\n\n        let resultdata;\n        let requestOptions = {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }\n\n        await fetch(config.apiurl + url, requestOptions)\n            .then((res) => res.json())\n            .then((data) => {\n                resultdata = data;\n            });\n\n        return resultdata;\n\n    }\n\n}\n\n\nexport default basemanager"]},"metadata":{},"sourceType":"module"}